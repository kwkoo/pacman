#!/bin/bash

PROJ="demo"
MONGODB_USER="pacman"
MONGODB_PASSWORD="pacpassword"
MONGODB_DATABASE="pacman"
MONGODB_ADMIN_USER="admin"
MONGODB_ADMIN_PASSWORD="${MONGODB_PASSWORD}"

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

set -e

oc project ${PROJ} || oc new-project ${PROJ}

oc create secret generic mongodb \
  --dry-run=client \
  -o yaml \
  --from-literal=MONGODB_ROOT_USER="${MONGODB_ADMIN_USER}" \
  --from-literal=MONGODB_ROOT_PASSWORD="${MONGODB_ADMIN_PASSWORD}" \
  --from-literal=MONGODB_USERNAME="${MONGODB_USER}" \
  --from-literal=MONGODB_PASSWORD="${MONGODB_PASSWORD}" \
  --from-literal=MONGODB_DATABASE="${MONGODB_DATABASE}" \
| \
oc label \
  -f - \
  --local \
  --dry-run=client \
  -o yaml \
  app=mongodb \
| \
oc apply -n ${PROJ} -f -

cat <<EOF | oc apply -n ${PROJ} -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: mongodb
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mongodb
    spec:
      containers:
      - image: docker.io/bitnami/mongodb:5.0.15-debian-11-r2
        name: mongodb
        livenessProbe:
          exec:
            command:
            - mongo
            - '--disableImplicitSessions'
            - '--eval'
            - "db.adminCommand('ping')"
        readinessProbe:
          exec:
            command:
            - mongo
            - '--disableImplicitSessions'
            - '--eval'
            - "db.adminCommand('ping')"
        envFrom:
        - secretRef:
            name: mongodb
        ports:
        - containerPort: 27017
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: mongodb
  name: mongodb
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app: mongodb
status:
  loadBalancer: {}
EOF

oc new-build \
  -n ${PROJ} \
  --name=pacman \
  -l app=pacman \
  --binary \
  -i openshift/nodejs:latest

echo -n "waiting for BuildConfig to appear..."
while [ "$(oc get -n ${PROJ} bc/pacman --no-headers 2>/dev/null | wc -l )" -lt 1 ]; do
  echo -n "."
  sleep 5
done
echo "done"

oc start-build -n ${PROJ} pacman --from-dir=${BASE}/.. --follow
cat ${BASE}/../yaml/pacman.yaml | PROJ=$PROJ envsubst | oc apply -n ${PROJ} -f -
oc set env \
  -n ${PROJ} \
  deploy/pacman \
  MONGO_SERVICE_HOST=mongodb \
  MONGO_DATABASE=pacman \
  MONGO_AUTH_USER="${MONGODB_USER}" \
  MONGO_AUTH_PWD="${MONGODB_PASSWORD}"

oc rollout status -n ${PROJ} deploy/pacman -w

echo "pacman is now available at http://$(oc get -n ${PROJ} route/pacman -o jsonpath='{.spec.host}')"
